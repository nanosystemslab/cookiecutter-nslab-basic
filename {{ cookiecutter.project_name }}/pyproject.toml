[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "0.1.0"
description = ""
authors = []
license = "{{ cookiecutter.license }}"
readme = "README.md"
packages = [{ include = "{{ cookiecutter.package_name }}", from = "src" }]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
ruff = "^0.6.9"
{% if cookiecutter.use_mypy == "y" -%}
mypy = "^1.11.1"
{% endif -%}
pytest = "^8.3.2"

[tool.ruff]
target-version = "py{{ cookiecutter.python_version | replace('.', '') }}"
line-length = 100
lint.select = ["E","F","I","UP","B","C4","TID","W"]
lint.ignore = []
exclude = ["build","dist",".venv"]

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

{% if cookiecutter.use_mypy == "y" -%}
[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
packages = ["{{ cookiecutter.package_name }}"]
check_untyped_defs = true
disallow_untyped_defs = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
{% endif -%}

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q"
testpaths = ["tests"]

[tool.poetry.scripts]
# example: cli = "{{ cookiecutter.package_name }}.__main__:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
